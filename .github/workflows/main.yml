name: Main

on:
  push:
    branches:
      - master
    tags:
      - v*

  pull_request:
    branches:
      - master

jobs:
  check:
    name: Check & Publish
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - uses: actions/checkout@v4

      # Services
      - name: Build the docker-compose stack
        run: |
          mkdir data
          curl -s -o data/mysql.sql https://raw.githubusercontent.com/harryho/db-samples/master/mysql/northwind.sql
          curl -s -o data/postgres.sql https://raw.githubusercontent.com/harryho/db-samples/master/pgsql/northwind.sql
          curl -s -o data/mongo.jsonl https://raw.githubusercontent.com/ozlerhakan/mongodb-json-files/master/datasets/books.json
          curl -s -o data/sqlserver.sql https://raw.githubusercontent.com/microsoft/sql-server-samples/master/samples/databases/northwind-pubs/instnwnd.sql
          
          curl -s -o data/oracle.sql https://raw.githubusercontent.com/oracle-samples/db-sample-schemas/main/customer_orders/co_create.sql
          curl -s -o data/oracle_pop.sql https://raw.githubusercontent.com/oracle-samples/db-sample-schemas/main/customer_orders/co_populate.sql
          cat data/oracle_pop.sql >> data/oracle.sql
          rm data/oracle_pop.sql
          
          docker-compose -f docker-compose-ci.yml up -d
          sleep 30
          docker exec plugin-singer_postgres_1 sh -c "psql -d postgres -U postgres -f /tmp/docker/postgres.sql > /dev/null"
          docker exec plugin-singer_postgres_1 sh -c "psql -d postgres -U postgres -c 'CREATE DATABASE sync' > /dev/null"
          docker exec plugin-singer_mongo_1 sh -c "mongoimport --authenticationDatabase admin -c books  "mongodb://root:example@localhost/samples" /tmp/docker/mongo.jsonl > /dev/null"
          docker exec plugin-singer_mysql_1 sh -c "mysql -u root -pmysql_passwd < /tmp/docker/mysql.sql"
          docker exec plugin-singer_sqlserver_1 sh -c "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P SQLServer_Passwd -d msdb -i /tmp/docker/sqlserver.sql > /dev/null"
          docker exec plugin-singer_oracle_1 sh -c "sqlplus -s system/oracle_passwd@localhost @/tmp/docker/oracle.sql > /dev/null"

      # Caches
      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle*.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # Python
      - name: Set up Python
        run: |
          python3 -m pip install virtualenv

      # Gradle check
      - name: Build with Gradle
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        run: |
          echo $GOOGLE_SERVICE_ACCOUNT | base64 -d > src/test/resources/gcp-service-account.yml
          ./gradlew check

      # Publish
      - name: Publish package to Sonatype
        if: github.ref == 'refs/heads/master'
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USER }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_GPG_KEYID: ${{ secrets.SONATYPE_GPG_KEYID }}
          SONATYPE_GPG_PASSWORD: ${{ secrets.SONATYPE_GPG_PASSWORD }}
          SONATYPE_GPG_FILE: ${{ secrets.SONATYPE_GPG_FILE }}
        run: |
          echo "signing.keyId=${SONATYPE_GPG_KEYID}" > ~/.gradle/gradle.properties
          echo "signing.password=${SONATYPE_GPG_PASSWORD}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=${HOME}/.gradle/secring.gpg" >> ~/.gradle/gradle.properties
          echo ${SONATYPE_GPG_FILE} | base64 -d > ~/.gradle/secring.gpg
          ./gradlew publishToSonatype

      # Release
      - name: Release package to Maven Central
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USER }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_GPG_KEYID: ${{ secrets.SONATYPE_GPG_KEYID }}
          SONATYPE_GPG_PASSWORD: ${{ secrets.SONATYPE_GPG_PASSWORD }}
          SONATYPE_GPG_FILE: ${{ secrets.SONATYPE_GPG_FILE }}
        run: |
          echo "signing.keyId=${SONATYPE_GPG_KEYID}" > ~/.gradle/gradle.properties
          echo "signing.password=${SONATYPE_GPG_PASSWORD}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=${HOME}/.gradle/secring.gpg" >> ~/.gradle/gradle.properties
          echo ${SONATYPE_GPG_FILE} | base64 -d > ~/.gradle/secring.gpg
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository

      # GitHub Release
      - name: Create GitHub release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            build/libs/*.jar

      # Slack
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: ${{ always() && env.SLACK_WEBHOOK_URL != 0 }}
        with:
          status: ${{ job.status }}
          job_name: Check & Publish
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          username: GitHub Actions
          icon_emoji: ':github-actions:'
          channel: 'C02DQ1A7JLR'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
